#!/usr/bin/env node

var ReactApp      = require('./index'),
    createBundler = require('./bundler'),
    getLogger     = require('./common').getLogger,
    version       = require('./package.json').version,
    colors        = require('colors'),
    fs            = require('fs'),
    p             = require('path'),
    wrap          = require('wordwrap'),
    optimist      = require('optimist')
      .usage('$0 [options] (bundle|serve)')
      .option('h', {
        alias: 'help',
        boolean: true,
        describe: 'Show this message and exit'
      })
      .option('verbose', {
        boolean: true,
        default: false,
        describe: 'Operate in verbose mode'
      })
      .option('q', {
        alias: 'quiet',
        boolean: true,
        default: false,
        describe: 'Operate in quiet mode'
      })
      .option('colors', {
        boolean: true,
        default: true,
        describe: 'Color logging output'
      })
      .option('v', {
        alias: 'version',
        boolean: true,
        describe: 'Show version'
      })
      .option('d', {
        alias: 'debug',
        boolean: true,
        default: false,
        describe: 'Run in debug mode'
      })
      .option('p', {
        alias: 'port',
        default: 3000,
        describe: 'Port to use'
      })
      .option('host', {
        default: 'localhost',
        describe: 'Host to use'
      })
      .option('render', {
        describe: 'Render UI on server',
        default: false,
        boolean: true
      })
      .option('t', {
        alias: 'transform',
        describe: 'Apply source transform'
      })
      .option('global-transform', {
        describe: 'Apply global source transform'
      })
      .option('o', {
        alias: 'output',
        describe: 'Output directory for bundle'
      })

if (optimist.argv.help) return optimist.showHelp();
if (optimist.argv.version) return console.log(version);

var argv = optimist.argv,
    id = argv._[1],
    logger = getLogger({
      colors: argv.colors,
      debug: argv.verbose,
      quiet: argv.quiet
    });

argv.root = process.cwd();
argv.logger = logger;
argv.globalTransform = argv['global-transform'];

switch (argv._[0]) {
  case 'serve':
    if (!id) error('provide module id as an argument');
    ReactApp(id, argv).listen(argv.port, argv.host);
    logger.info('start serving on ' + argv.host + ':' +argv.port);
    break;
  case 'bundle':
    var output = argv.output || argv.o || '.';
    var bundler = createBundler(id, argv).bundle.then(function(bundles) {
      for (var name in bundles)
        fs.writeFileSync(p.join(output, name), bundles[name]);
    }).end();
    break;
  default:
    error(argv._[0] ? 'unknown command ' + argv._[0] : 'no command given', true);
}

function error(msg, showHelp) {
  if (showHelp)
    optimist.showHelp();
  logger.error(msg);
  process.exit(1);
}
